/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweepergame;

import javax.swing.BorderFactory;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JPanel;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author roblo
 */
public class MineSweeperGame extends javax.swing.JFrame {

    private minePanel panelArray[][] = new minePanel[5][4];

    /**
     * Creates new form MineSweeperGame
     */
    public MineSweeperGame() {
        initComponents();
        generateBoard(mineSweeperPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mineSweeperPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(2000, 2000));

        mineSweeperPanel.setLayout(new java.awt.GridLayout(5, 4));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mineSweeperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mineSweeperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MineSweeperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MineSweeperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MineSweeperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MineSweeperGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MineSweeperGame().setVisible(true);
            }
        });
    }

    private void generateBoard(JPanel container) {
        Random randomGen = new Random();
        int bombCounter = 0;
        int bombTotal = 5;
        int randomNum = 0;
        for (int x = 0; x < panelArray.length; x++) {
            for (int y = 0; y < panelArray[x].length; y++) {

                panelArray[x][y] = new minePanel();

                randomNum = randomGen.nextInt(10);
                if (randomNum > 5 && bombCounter != bombTotal) {
                    panelArray[x][y].setMineType("Bomb");
                    panelArray[x][y].setMineColor(new Color(150, 150, 150));
                    bombCounter++;
                } else {
                    panelArray[x][y].setMineType("");
                    panelArray[x][y].setMineColor(new Color(240, 240, 240));
                }

            }
        }
        if (bombCounter != bombTotal) {
            while (bombCounter != bombTotal) {
                for (int x = 0; x < panelArray.length; x++) {
                    for (int y = 0; y < panelArray[x].length; y++) {
                        randomNum = randomGen.nextInt(10);
                        if ((randomNum > 5 && bombCounter != bombTotal) && !panelArray[x][y].getMineType().equalsIgnoreCase("bomb")) {

                            panelArray[x][y].setMineType("Bomb");
                            panelArray[x][y].setMineColor(new Color(150, 150, 150));
                            bombCounter++;
                        }
                    }
                }
            }
        }
        Border blackBorder = BorderFactory.createLineBorder(Color.BLACK);
        for (int x = 0; x < panelArray.length; x++) {
            for (int y = 0; y < panelArray[x].length; y++) {
                panelArray[x][y].setBackground(new Color(240, 240, 240));
                panelArray[x][y].setBorder(blackBorder);
                container.add(panelArray[x][y]);
                container.revalidate();
            }
        }
    }

    public void displayMine(MouseEvent evt) {
        if (!(evt.getSource() instanceof minePanel)) {
            return;
        }
        minePanel source = (minePanel) evt.getSource();
        if (source.getMineType().equalsIgnoreCase("bomb")) {
            for (int x = 0; x < panelArray.length; x++) {
                for (int y = 0; y < panelArray[x].length; y++) {
                    panelArray[x][y].setBackground(panelArray[x][y].getMineColor());
                    panelArray[x][y].setLabelVisible(true);
                    if (!panelArray[x][y].getMineType().equalsIgnoreCase("bomb")) {
                        panelArray[x][y].setMineType(Integer.toString(showMineNumber(panelArray[x][y])));
                    }
                    mineSweeperPanel.revalidate();
                }
            }
            JOptionPane.showMessageDialog(this, "You Lose!");
            return;
        } else {
            source.setMineType(Integer.toString(showMineNumber(source)));
            source.setLabelVisible(true);
            mineSweeperPanel.revalidate();
        }
        if (checkForWin()) {
            for (int x = 0; x < panelArray.length; x++) {
                for (int y = 0; y < panelArray[x].length; y++) {
                    panelArray[x][y].setBackground(panelArray[x][y].getMineColor());
                    panelArray[x][y].setLabelVisible(true);
                    if (!panelArray[x][y].getMineType().equalsIgnoreCase("bomb")) {
                        panelArray[x][y].setMineType(Integer.toString(showMineNumber(panelArray[x][y])));
                    }
                    mineSweeperPanel.revalidate();
                }
            }
            JOptionPane.showMessageDialog(this, "You Win!");
        }
    }

    private int showMineNumber(minePanel mine) {
        int mineX = 0;
        int mineY = 0;
        int counter = 0;
        for (int x = 0; x < panelArray.length; x++) {
            for (int y = 0; y < panelArray[x].length; y++) {
                if (panelArray[x][y].equals(mine)) {
                    mineX = x;
                    mineY = y;
                }
            }
        }
        for (int x = Math.max(0, mineX - 1); x <= Math.min(mineX + 1, panelArray.length - 1); x++) {
            for (int y = Math.max(0, mineY - 1); y <= Math.min(mineY + 1, panelArray[x].length - 1); y++) {
                if (panelArray[x][y].getMineType().equalsIgnoreCase("bomb")) {
                    counter++;
                }
            }
        }
        return counter;
    }

    public boolean checkForWin() {
        for (int x = 0; x < panelArray.length; x++) {
            for (int y = 0; y < panelArray[x].length; y++) {
                if (panelArray[x][y].getMineType().equalsIgnoreCase("")) {
                    return false;
                }
            }
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mineSweeperPanel;
    // End of variables declaration//GEN-END:variables

    class minePanel extends JPanel implements MouseListener {

        private JLabel mineType = new JLabel();
        private Color mineColor = new Color(0, 0, 0);

        public minePanel() {
            addMouseListener(this);
            this.setLayout(new BorderLayout());
            mineType.setVisible(false);
            mineType.setFont(new Font(Font.MONOSPACED, Font.BOLD, 36));
            mineType.setHorizontalAlignment(JLabel.CENTER);
            this.add(mineType);
            this.revalidate();
        }

        public String getMineType() {
            return mineType.getText();
        }

        public void setMineType(String type) {
            this.mineType.setText(type);
        }

        public Color getMineColor() {
            return mineColor;
        }

        public void setMineColor(Color mineColor) {
            this.mineColor = mineColor;
        }

        public void setLabelVisible(boolean yesNo) {
            mineType.setVisible(yesNo);
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            displayMine(e);
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }
}
